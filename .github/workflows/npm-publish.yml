name: Publish Packages to NPM and TBDocs

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      jobSelector:
        type: choice
        description: "Select publishing options"
        required: true
        options:
          - "all"
          - "docs"
          - "npm"

# Allow only one concurrent deployment,but do NOT cancel in-progress runs as
# we want to allow these release deployments to complete.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write # necessary for NPM provenance

jobs:
  tbdocs-publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.jobSelector == 'all' || github.event.inputs.jobSelector == 'docs' }}
    steps:
      - name: Checkout source
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: pnpm install

      - name: Build all workspace packages
        run: pnpm build

      - name: TBDocs Reporter and Generator
        id: tbdocs-reporter-generator
        uses: TBD54566975/tbdocs@main
        with:
          bot_app_id: ${{ secrets.TBDOCS_BOT_APP_ID }}
          bot_app_private_key: ${{ secrets.TBDOCS_BOT_APP_PRIVATE_KEY }}
          bot_app_installation_id: ${{ secrets.TBDOCS_BOT_APP_INSTALLATION_ID }}
          fail_on_error: true
          fail_on_warnings: false
          docs_target_owner_repo: "TBD54566975/developer.tbd.website"
          docs_target_branch: "tbdocs-bot/tbdex-js/packages"
          docs_target_pr_base_branch: "main"
          entry_points: |
            - file: packages/protocol/src/main.ts
              docsReporter: api-extractor
              docsGenerator: typedoc-markdown
              targetRepoPath: site/docs/tbdex/api-reference/tbdex-js/protocol
            - file: packages/http-client/src/main.ts
              docsReporter: api-extractor
              docsGenerator: typedoc-markdown
              targetRepoPath: site/docs/tbdex/api-reference/tbdex-js/http-client
            - file: packages/http-server/src/main.ts
              docsReporter: api-extractor
              docsGenerator: typedoc-markdown
              targetRepoPath: site/docs/tbdex/api-reference/tbdex-js/http-server

  publish-npm:
    needs: tbdocs-publish
    if: ${{ (github.event.inputs.jobSelector == 'all' && needs.tbdocs-publish.result == 'success') || (github.event.inputs.jobSelector == 'npm' && always())}}
    name: NPM Publish
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 1
      matrix:
        package: ["protocol", "http-client", "http-server"]

    steps:
      - name: Checkout source
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2

      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      # Note - this is not required but it gives a clean failure prior to attempting a release if the GH workflow runner is not authenticated with NPMjs.com
      - name: Verify NPM token is authenticated with NPMjs.com
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
        run: pnpm whoami

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build

      - name: Check if GitHub repo package version is latest
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
        run: |
          cd packages/${{ matrix.package }}

          # Fetch the published version on NPMjs.com.
          PUBLISHED_VERSION=$(pnpm view @tbdex/${{ matrix.package }} version 2>/dev/null || echo "0.0.0")
          echo "Published Version: $PUBLISHED_VERSION"

          # Fetch the version in the GitHub repo's package.json file.
          REPO_VERSION=$(node -p "require('./package.json').version")
          echo "REPO_VERSION=$REPO_VERSION" >> $GITHUB_ENV
          echo "Repo Version: $REPO_VERSION"

          # Compare the repo and NPMjs.com package versions.
          IS_GREATER=$(pnpm semver --range ">$PUBLISHED_VERSION" $REPO_VERSION || true)
          if [ -n "$IS_GREATER" ] ; then
            echo "@tbdex/${{ matrix.package }}@$REPO_VERSION is latest"
            echo "IS_LATEST=true" >> $GITHUB_ENV
          else
            echo "@tbdex/${{ matrix.package }}@$REPO_VERSION is already published or repo version is lower"
            echo "IS_LATEST=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Publish @tbdex/${{ matrix.package }}@${{ env.REPO_VERSION }}
        if: env.IS_LATEST == 'true'
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}
          NPM_CONFIG_PROVENANCE: true
        run: |
          cd packages/${{ matrix.package }}
          pnpm publish --access public
        shell: bash
